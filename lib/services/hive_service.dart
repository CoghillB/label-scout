import 'package:hive_flutter/hive_flutter.dart';

import '../models/saved_food_item.dart';

/// Service for managing saved food items in the local Hive database
class HiveService {
  static const String _savedItemsBoxName = 'savedFoodItems';
  
  /// Initializes Hive and registers adapters
  static Future<void> initialize() async {
    await Hive.initFlutter();
    
    // Register the SavedFoodItem adapter (generated by build_runner)
    if (!Hive.isAdapterRegistered(0)) {
      Hive.registerAdapter(SavedFoodItemAdapter());
    }
    
    // Open the saved items box
    await Hive.openBox<SavedFoodItem>(_savedItemsBoxName);
  }
  
  /// Gets the saved items box
  Box<SavedFoodItem> _getSavedItemsBox() {
    return Hive.box<SavedFoodItem>(_savedItemsBoxName);
  }
  
  /// Saves a food item to the database
  /// Uses barcode as the unique key
  Future<void> saveItem(SavedFoodItem item) async {
    final box = _getSavedItemsBox();
    await box.put(item.barcode, item);
  }
  
  /// Retrieves a food item by barcode
  SavedFoodItem? getItem(String barcode) {
    final box = _getSavedItemsBox();
    return box.get(barcode);
  }
  
  /// Checks if an item with the given barcode is already saved
  bool isItemSaved(String barcode) {
    final box = _getSavedItemsBox();
    return box.containsKey(barcode);
  }
  
  /// Gets all saved items
  List<SavedFoodItem> getAllItems() {
    final box = _getSavedItemsBox();
    return box.values.toList();
  }
  
  /// Gets all safe food items
  List<SavedFoodItem> getSafeItems() {
    final box = _getSavedItemsBox();
    return box.values.where((item) => item.status == 'safe').toList();
  }
  
  /// Gets all items to avoid
  List<SavedFoodItem> getAvoidItems() {
    final box = _getSavedItemsBox();
    return box.values.where((item) => item.status == 'avoid').toList();
  }
  
  /// Gets items filtered by category
  List<SavedFoodItem> getItemsByCategory(String category) {
    final box = _getSavedItemsBox();
    return box.values.where((item) => item.category == category).toList();
  }
  
  /// Gets items filtered by status and category
  List<SavedFoodItem> getItemsByStatusAndCategory(String status, String? category) {
    final box = _getSavedItemsBox();
    var items = box.values.where((item) => item.status == status);
    
    if (category != null && category != 'All') {
      items = items.where((item) => item.category == category);
    }
    
    return items.toList();
  }
  
  /// Gets all unique categories
  List<String> getAllCategories() {
    final box = _getSavedItemsBox();
    final categories = box.values.map((item) => item.category).toSet().toList();
    categories.sort();
    return categories;
  }
  
  /// Deletes an item by barcode
  Future<void> deleteItem(String barcode) async {
    final box = _getSavedItemsBox();
    await box.delete(barcode);
  }
  
  /// Deletes all saved items
  Future<void> deleteAllItems() async {
    final box = _getSavedItemsBox();
    await box.clear();
  }
  
  /// Closes all Hive boxes
  static Future<void> close() async {
    await Hive.close();
  }
}
